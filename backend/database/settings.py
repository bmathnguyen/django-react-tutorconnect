"""
Django settings for database project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from decouple import config
from pathlib import Path
from datetime import timedelta

BASE_DIR = Path(__file__).resolve().parent.parent

# Environment variables (see .env or system env)
SECRET_KEY = config('SECRET_KEY')
DEBUG = config('DEBUG', default=True, cast=bool)
ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='localhost,127.0.0.1,157.66.47.161').split(',')


# Application definition
INSTALLED_APPS = [
    'daphne',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt',
    'corsheaders',
    'django_filters',
    'channels',
    'channels_redis',
    'database',
    'api',
    'rest_framework_simplejwt.token_blacklist',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    "django.middleware.security.SecurityMiddleware",
    'whitenoise.middleware.WhiteNoiseMiddleware',
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "database.urls"
WSGI_APPLICATION = "database.wsgi.application"
ASGI_APPLICATION = "database.asgi.application"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

# Database
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': config('DB_NAME', default='tutoring_db'),
        'USER': config('DB_USER', default='postgres'),
        'PASSWORD': config('DB_PASSWORD', default='password'),
        'HOST': config('DB_HOST', 'localhost'),
        'PORT': config('DB_PORT', '5432'),
    }
}

# NEW: Fallback to SQLite for development (easier setup)
if DEBUG and not config('USE_POSTGRES'):
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }

# NEW: Custom User Model - extends Django's User with student/tutor types
AUTH_USER_MODEL = 'api.CustomUser'

# NEW: Cache configuration using Redis (fast data access, sessions)
if config('USE_REDIS', default='0') == '1':
    CACHES = {
        'default': {
            'BACKEND': 'django_redis.cache.RedisCache',
            'LOCATION': config('REDIS_URL', 'redis://localhost:6379/1'),
            'OPTIONS': {
                'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            }
        }
    }
else:
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
            'LOCATION': 'unique-snowflake',
        }
    }

# NEW: Store sessions in cache (faster than database)
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'default'

# NEW: WebSocket channel layer configuration (for real-time chat)
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            'hosts': [config('REDIS_URL', 'redis://localhost:6379/0')],
        },
    },
}

# NEW: Fallback channel layer for development (no Redis needed)
if DEBUG and not config('USE_REDIS'):
    CHANNEL_LAYERS = {
        'default': {
            'BACKEND': 'channels.layers.InMemoryChannelLayer'
        },
    }

# NEW: Django REST Framework configuration (API settings)
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',  # Use JWT tokens
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',  # Require authentication by default
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,  # Return 20 items per page
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',  # Enable filtering
        'rest_framework.filters.SearchFilter',                # Enable search
        'rest_framework.filters.OrderingFilter',              # Enable sorting
    ],
}

# NEW: JWT token configuration (secure authentication for mobile)
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=24),    # Token valid for 24 hours
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),     # Refresh token valid for 7 days
    'ROTATE_REFRESH_TOKENS': True,                   # Generate new refresh token on use
    'BLACKLIST_AFTER_ROTATION': True,               # Invalidate old refresh tokens
    'UPDATE_LAST_LOGIN': True,                       # Update last login timestamp
    'ALGORITHM': 'HS256',                           # Encryption algorithm
    'SIGNING_KEY': SECRET_KEY,                      # Use SECRET_KEY for signing
}

# NEW: CORS configuration (allows React Native to connect)
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",     # React web app
    "http://127.0.0.1:3000",    # React web app (alternative)
    "http://localhost:8081",     # Expo default port
]
CORS_ALLOW_CREDENTIALS = True  # Allow cookies/auth headers


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/
# LANGUAGE_CODE = 'vi-VN'  # CHANGED: Vietnamese language for tutoring platform
LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Ho_Chi_Minh'  # CHANGED: Vietnam timezone

USE_I18N = True
USE_L10N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')  # NEW: Where static files are collected
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'  # NEW: Efficient static file serving

# NEW: Media files configuration (user uploads like profile images)
MEDIA_URL = '/media/'  # URL prefix for media files
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')  # Directory to store uploaded files

# NEW: File upload security settings
FILE_UPLOAD_MAX_MEMORY_SIZE = 5242880  # 5MB max file size in memory
DATA_UPLOAD_MAX_MEMORY_SIZE = 5242880  # 5MB max total upload size

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# NEW: Security settings for production
if not DEBUG:
    SECURE_BROWSER_XSS_FILTER = True              # Prevent XSS attacks
    SECURE_CONTENT_TYPE_NOSNIFF = True            # Prevent MIME sniffing
    X_FRAME_OPTIONS = 'DENY'                      # Prevent clickjacking
    SECURE_HSTS_SECONDS = 31536000                # Force HTTPS for 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True         # Apply HTTPS to subdomains
    SECURE_HSTS_PRELOAD = True                    # Enable HSTS preload

# NEW: Logging configuration (helps debug issues)
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'django.log',
        },
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
        'api': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}