# Generated by Django 4.2.7 on 2025-07-23 07:37

import api.models.chat
import api.models.profile
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("email", models.EmailField(max_length=254, unique=True)),
                (
                    "phone",
                    models.CharField(
                        blank=True,
                        max_length=15,
                        validators=[
                            django.core.validators.RegexValidator(
                                code="invalid_phone",
                                message="Phone number must be exactly 10 digits (e.g., 0123456789)",
                                regex="^\\d{10}$",
                            )
                        ],
                    ),
                ),
                (
                    "user_type",
                    models.CharField(
                        choices=[("student", "Student"), ("tutor", "Tutor")],
                        max_length=10,
                    ),
                ),
                ("is_online", models.BooleanField(default=False)),
                (
                    "last_activity",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "db_table": "auth_user",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="ChatRoom",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("last_message_at", models.DateTimeField(auto_now_add=True)),
                ("is_active", models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name="StudentProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("school", models.CharField(blank=True, max_length=200)),
                (
                    "grade",
                    models.CharField(
                        choices=[
                            ("1", "Lớp 1"),
                            ("2", "Lớp 2"),
                            ("3", "Lớp 3"),
                            ("4", "Lớp 4"),
                            ("5", "Lớp 5"),
                            ("6", "Lớp 6"),
                            ("7", "Lớp 7"),
                            ("8", "Lớp 8"),
                            ("9", "Lớp 9"),
                            ("10", "Lớp 10"),
                            ("11", "Lớp 11"),
                            ("12", "Lớp 12"),
                            ("university", "Đại học"),
                        ],
                        max_length=20,
                    ),
                ),
                ("learning_goals", models.JSONField(blank=True, default=list)),
                (
                    "location",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("hanoi", "Hà Nội"),
                            ("hochiminh", "TP. Hồ Chí Minh"),
                            ("danang", "Đà Nẵng"),
                            ("haiphong", "Hải Phòng"),
                            ("cantho", "Cần Thơ"),
                            ("binhduong", "Bình Dương"),
                            ("dongnai", "Đồng Nai"),
                            ("baivungtau", "Bà Rịa - Vũng Tàu"),
                            ("quangninh", "Quảng Ninh"),
                            ("thainguyen", "Thái Nguyên"),
                            ("vinhphuc", "Vĩnh Phúc"),
                            ("bacninh", "Bắc Ninh"),
                            ("haidương", "Hải Dương"),
                            ("hungyen", "Hưng Yên"),
                            ("namdinh", "Nam Định"),
                            ("thaibinh", "Thái Bình"),
                            ("ninhbinh", "Ninh Bình"),
                            ("thanhhoa", "Thanh Hóa"),
                            ("nghean", "Nghệ An"),
                            ("hatinh", "Hà Tĩnh"),
                            ("quangbinh", "Quảng Bình"),
                            ("quangtri", "Quảng Trị"),
                            ("thuathienhue", "Thừa Thiên Huế"),
                            ("quangnam", "Quảng Nam"),
                            ("quangngai", "Quảng Ngãi"),
                            ("binhdinh", "Bình Định"),
                            ("phuyen", "Phú Yên"),
                            ("khanhhoa", "Khánh Hòa"),
                            ("ninhthuan", "Ninh Thuận"),
                            ("binhthuan", "Bình Thuận"),
                            ("lamdong", "Lâm Đồng"),
                            ("dongnai", "Đồng Nai"),
                            ("tayninh", "Tây Ninh"),
                            ("binhphuoc", "Bình Phước"),
                            ("longan", "Long An"),
                            ("tiengiang", "Tiền Giang"),
                            ("bentre", "Bến Tre"),
                            ("travinh", "Trà Vinh"),
                            ("vinhlong", "Vĩnh Long"),
                            ("dongthap", "Đồng Tháp"),
                            ("angiang", "An Giang"),
                            ("kiengiang", "Kiên Giang"),
                            ("camau", "Cà Mau"),
                            ("baclieu", "Bạc Liêu"),
                            ("soc trang", "Sóc Trăng"),
                            ("other", "Tỉnh/Thành phố khác"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "budget_min",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "budget_max",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "profile_image",
                    models.ImageField(
                        blank=True, upload_to=api.models.profile.user_profile_path
                    ),
                ),
            ],
            options={
                "db_table": "student_profiles",
            },
        ),
        migrations.CreateModel(
            name="Subject",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("description", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name="TutorProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("university", models.CharField(blank=True, max_length=200)),
                ("major", models.CharField(blank=True, max_length=200)),
                (
                    "experience_years",
                    models.CharField(
                        choices=[
                            ("0-1", "0-1 năm"),
                            ("1-3", "1-3 năm"),
                            ("3-5", "3-5 năm"),
                            ("5+", "Trên 5 năm"),
                        ],
                        max_length=10,
                    ),
                ),
                ("bio", models.TextField(blank=True)),
                ("hourly_rate", models.DecimalField(decimal_places=2, max_digits=10)),
                (
                    "location",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("hanoi", "Hà Nội"),
                            ("hochiminh", "TP. Hồ Chí Minh"),
                            ("danang", "Đà Nẵng"),
                            ("haiphong", "Hải Phòng"),
                            ("cantho", "Cần Thơ"),
                            ("binhduong", "Bình Dương"),
                            ("dongnai", "Đồng Nai"),
                            ("baivungtau", "Bà Rịa - Vũng Tàu"),
                            ("quangninh", "Quảng Ninh"),
                            ("thainguyen", "Thái Nguyên"),
                            ("vinhphuc", "Vĩnh Phúc"),
                            ("bacninh", "Bắc Ninh"),
                            ("haidương", "Hải Dương"),
                            ("hungyen", "Hưng Yên"),
                            ("namdinh", "Nam Định"),
                            ("thaibinh", "Thái Bình"),
                            ("ninhbinh", "Ninh Bình"),
                            ("thanhhoa", "Thanh Hóa"),
                            ("nghean", "Nghệ An"),
                            ("hatinh", "Hà Tĩnh"),
                            ("quangbinh", "Quảng Bình"),
                            ("quangtri", "Quảng Trị"),
                            ("thuathienhue", "Thừa Thiên Huế"),
                            ("quangnam", "Quảng Nam"),
                            ("quangngai", "Quảng Ngãi"),
                            ("binhdinh", "Bình Định"),
                            ("phuyen", "Phú Yên"),
                            ("khanhhoa", "Khánh Hòa"),
                            ("ninhthuan", "Ninh Thuận"),
                            ("binhthuan", "Bình Thuận"),
                            ("lamdong", "Lâm Đồng"),
                            ("dongnai", "Đồng Nai"),
                            ("tayninh", "Tây Ninh"),
                            ("binhphuoc", "Bình Phước"),
                            ("longan", "Long An"),
                            ("tiengiang", "Tiền Giang"),
                            ("bentre", "Bến Tre"),
                            ("travinh", "Trà Vinh"),
                            ("vinhlong", "Vĩnh Long"),
                            ("dongthap", "Đồng Tháp"),
                            ("angiang", "An Giang"),
                            ("kiengiang", "Kiên Giang"),
                            ("camau", "Cà Mau"),
                            ("baclieu", "Bạc Liêu"),
                            ("soc trang", "Sóc Trăng"),
                            ("other", "Tỉnh/Thành phố khác"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "top_achievements",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="Top 2-3 achievements for quick display",
                    ),
                ),
                ("is_verified", models.BooleanField(default=False)),
                (
                    "rating_average",
                    models.DecimalField(decimal_places=2, default=0.0, max_digits=3),
                ),
                ("total_reviews", models.IntegerField(default=0)),
                (
                    "profile_image",
                    models.ImageField(
                        blank=True, upload_to=api.models.profile.user_profile_path
                    ),
                ),
                ("availability", models.JSONField(blank=True, default=dict)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tutor_profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "tutor_profiles",
            },
        ),
        migrations.CreateModel(
            name="TutorView",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("viewed_at", models.DateTimeField(auto_now_add=True)),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="viewed_tutors",
                        to="api.studentprofile",
                    ),
                ),
                (
                    "tutor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="views",
                        to="api.tutorprofile",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="TutorLike",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="liked_tutors",
                        to="api.studentprofile",
                    ),
                ),
                (
                    "tutor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="likes",
                        to="api.tutorprofile",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="studentprofile",
            name="preferred_subjects",
            field=models.ManyToManyField(blank=True, to="api.subject"),
        ),
        migrations.AddField(
            model_name="studentprofile",
            name="user",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="student_profile",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.CreateModel(
            name="Review",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "rating",
                    models.IntegerField(
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ]
                    ),
                ),
                ("comment", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reviews_given",
                        to="api.studentprofile",
                    ),
                ),
                (
                    "tutor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="reviews_received",
                        to="api.tutorprofile",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Message",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("content", models.TextField()),
                (
                    "message_type",
                    models.CharField(
                        choices=[
                            ("text", "Text"),
                            ("image", "Image"),
                            ("file", "File"),
                        ],
                        default="text",
                        max_length=20,
                    ),
                ),
                (
                    "file_attachment",
                    models.FileField(
                        blank=True, upload_to=api.models.chat.chat_file_path
                    ),
                ),
                ("is_read", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "chat_room",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="messages",
                        to="api.chatroom",
                    ),
                ),
                (
                    "sender",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddField(
            model_name="chatroom",
            name="student",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="chat_rooms",
                to="api.studentprofile",
            ),
        ),
        migrations.AddField(
            model_name="chatroom",
            name="tutor",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="chat_rooms",
                to="api.tutorprofile",
            ),
        ),
        migrations.CreateModel(
            name="TutorSubject",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "proficiency_level",
                    models.CharField(
                        choices=[
                            ("beginner", "Cơ bản"),
                            ("intermediate", "Trung bình"),
                            ("advanced", "Nâng cao"),
                            ("expert", "Chuyên gia"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "subject",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="api.subject"
                    ),
                ),
                (
                    "tutor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tutor_subjects",
                        to="api.tutorprofile",
                    ),
                ),
            ],
            options={
                "unique_together": {("tutor", "subject")},
            },
        ),
        migrations.CreateModel(
            name="TutorSave",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "student",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="saved_tutors",
                        to="api.studentprofile",
                    ),
                ),
                (
                    "tutor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="saves",
                        to="api.tutorprofile",
                    ),
                ),
            ],
            options={
                "unique_together": {("student", "tutor")},
            },
        ),
        migrations.AddIndex(
            model_name="tutorprofile",
            index=models.Index(
                fields=["hourly_rate"], name="tutor_profi_hourly__205d01_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="tutorprofile",
            index=models.Index(
                fields=["location"], name="tutor_profi_locatio_b2ad69_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="tutorprofile",
            index=models.Index(
                fields=["rating_average"], name="tutor_profi_rating__54087e_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="tutorlike",
            unique_together={("student", "tutor")},
        ),
        migrations.AlterUniqueTogether(
            name="review",
            unique_together={("student", "tutor")},
        ),
        migrations.AlterUniqueTogether(
            name="chatroom",
            unique_together={("student", "tutor")},
        ),
        migrations.AddIndex(
            model_name="customuser",
            index=models.Index(
                fields=["user_type", "created_at"], name="auth_user_user_ty_92c122_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="customuser",
            index=models.Index(
                fields=["is_online"], name="auth_user_is_onli_e080a7_idx"
            ),
        ),
    ]
